{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "interpreter": {
      "hash": "6d46af94c2bbce495f1e668725902fa517c90b1782bcfe2fce0dd9868df553d3"
    },
    "kernelspec": {
      "display_name": "Python 3.7.6 64-bit ('base': conda)",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": ""
    },
    "orig_nbformat": 4,
    "colab": {
      "name": "BiLSTM_CNN_Kannada.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "siLoWg_MR_Do",
        "outputId": "66206365-6f86-47e7-d0c3-5b657a606629"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b2_qquGFQu4C"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import re\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "from keras.preprocessing.text import Tokenizer\n",
        "from keras.preprocessing.sequence import pad_sequences\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, Dropout, Embedding, Flatten, GlobalAveragePooling1D, LSTM, Bidirectional, Conv1D, MaxPooling1D\n",
        "import tensorflow as tf\n",
        "\n",
        "from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score, confusion_matrix, classification_report"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4mBa_3CuQu4H",
        "outputId": "b7a3b28a-bc2c-45d1-d92f-6f84e67233a1"
      },
      "source": [
        "'''embedding_vectors = {}\n",
        "f = open(\"E:\\zz\\INT\\piblitz\\summarizer\\glove.6B\\glove.6B.100d.txt\", encoding=\"utf8\")\n",
        "for line in f:\n",
        "    value = line.split(\" \")\n",
        "    word = value[0]\n",
        "    coef = np.array(value[1:], dtype='float32')\n",
        "    embedding_vectors[word] = coef\n",
        "print(\"Total word vectors: \", len(embedding_vectors))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total word vectors:  400001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220
        },
        "id": "A72SvpKzQu4L",
        "outputId": "013e1942-6e00-47f7-a8e1-e7acbcb10400"
      },
      "source": [
        "df_tr = pd.read_csv('/content/drive/My Drive/dataset/kannada_sentiment_full_train.tsv', sep='\\t')\n",
        "print(df_tr.shape)\n",
        "df_tr.head()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(6212, 2)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ಒಂದು ದೇಶದ ಮುಂದುವರಿಯುವುದು ಅದರ ಆರ್ಥಿಕ ಸ್ಥಿತಿಯನ್ನ...</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ಕನ್ನಡದಲ್ಲಿ ಡೈಲಿ ಟೆಕ್ ಅಪ್ಡೇಟ್ಸ್ ಪಡೆಯಲು ಸಬ್ಸ್ಕ್ರ...</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Super sar song</td>\n",
              "      <td>not-Kannada</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tiktokers present situation... nನೋಡುವವರು ಯಾರು ...</td>\n",
              "      <td>Negative</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Super ಸಾಂಗ್ ವೆರಿ ನೈಸ್....</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                text     category\n",
              "0  ಒಂದು ದೇಶದ ಮುಂದುವರಿಯುವುದು ಅದರ ಆರ್ಥಿಕ ಸ್ಥಿತಿಯನ್ನ...     Negative\n",
              "1  ಕನ್ನಡದಲ್ಲಿ ಡೈಲಿ ಟೆಕ್ ಅಪ್ಡೇಟ್ಸ್ ಪಡೆಯಲು ಸಬ್ಸ್ಕ್ರ...     Positive\n",
              "2                                     Super sar song  not-Kannada\n",
              "3  Tiktokers present situation... nನೋಡುವವರು ಯಾರು ...     Negative\n",
              "4                          Super ಸಾಂಗ್ ವೆರಿ ನೈಸ್....     Positive"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oEN5ietLQu4N",
        "outputId": "46925b11-ee94-4ffb-db0f-90b88c38fb3d"
      },
      "source": [
        "print(df_tr['category'].value_counts())\n",
        "df_tr['category'].unique()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Positive          2823\n",
            "Negative          1188\n",
            "not-Kannada        916\n",
            "unknown state      711\n",
            "Mixed feelings     574\n",
            "Name: category, dtype: int64\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Negative', 'Positive', 'not-Kannada', 'Mixed feelings',\n",
              "       'unknown state'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NUcOhijNQu4P"
      },
      "source": [
        "categories = pd.get_dummies(df_tr.category)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "-W0LcWrkQu4R",
        "outputId": "2a72e90e-a537-472c-8322-853df23152a4"
      },
      "source": [
        "df_tr = pd.concat([df_tr, categories], axis=1)\n",
        "df_tr.head()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>category</th>\n",
              "      <th>Mixed feelings</th>\n",
              "      <th>Negative</th>\n",
              "      <th>Positive</th>\n",
              "      <th>not-Kannada</th>\n",
              "      <th>unknown state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ಒಂದು ದೇಶದ ಮುಂದುವರಿಯುವುದು ಅದರ ಆರ್ಥಿಕ ಸ್ಥಿತಿಯನ್ನ...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ಕನ್ನಡದಲ್ಲಿ ಡೈಲಿ ಟೆಕ್ ಅಪ್ಡೇಟ್ಸ್ ಪಡೆಯಲು ಸಬ್ಸ್ಕ್ರ...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Super sar song</td>\n",
              "      <td>not-Kannada</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tiktokers present situation... nನೋಡುವವರು ಯಾರು ...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Super ಸಾಂಗ್ ವೆರಿ ನೈಸ್....</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                text  ... unknown state\n",
              "0  ಒಂದು ದೇಶದ ಮುಂದುವರಿಯುವುದು ಅದರ ಆರ್ಥಿಕ ಸ್ಥಿತಿಯನ್ನ...  ...             0\n",
              "1  ಕನ್ನಡದಲ್ಲಿ ಡೈಲಿ ಟೆಕ್ ಅಪ್ಡೇಟ್ಸ್ ಪಡೆಯಲು ಸಬ್ಸ್ಕ್ರ...  ...             0\n",
              "2                                     Super sar song  ...             0\n",
              "3  Tiktokers present situation... nನೋಡುವವರು ಯಾರು ...  ...             0\n",
              "4                          Super ಸಾಂಗ್ ವೆರಿ ನೈಸ್....  ...             0\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uwr3lO2oQu5I"
      },
      "source": [
        "def demoji(text):\n",
        "\temoji_pattern = re.compile(\"[\"\n",
        "\t\tu\"\\U0001F600-\\U0001F64F\"  # emoticons\n",
        "        u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n",
        "        u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n",
        "        u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n",
        "        u\"\\U00002702-\\U000027B0\"\n",
        "        u\"\\U000024C2-\\U0001F251\"\n",
        "        u\"\\U00010000-\\U0010ffff\"\n",
        "\t\"]+\", flags=re.UNICODE)\n",
        "\treturn(emoji_pattern.sub(r'', text))"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 511
        },
        "id": "8AoKSbyvQu5M",
        "outputId": "5de27832-ba65-443f-e99d-a03be546df47"
      },
      "source": [
        "df_tr['text'] = df_tr['text'].apply(lambda x: demoji(x))\n",
        "df_tr['text'] = df_tr['text'].str.replace('\\d+', '')\n",
        "df_tr.head(15)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>category</th>\n",
              "      <th>Mixed feelings</th>\n",
              "      <th>Negative</th>\n",
              "      <th>Positive</th>\n",
              "      <th>not-Kannada</th>\n",
              "      <th>unknown state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ಒಂದು ದೇಶದ ಮುಂದುವರಿಯುವುದು ಅದರ ಆರ್ಥಿಕ ಸ್ಥಿತಿಯನ್ನ...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ಕನ್ನಡದಲ್ಲಿ ಡೈಲಿ ಟೆಕ್ ಅಪ್ಡೇಟ್ಸ್ ಪಡೆಯಲು ಸಬ್ಸ್ಕ್ರ...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Super sar song</td>\n",
              "      <td>not-Kannada</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Tiktokers present situation... nನೋಡುವವರು ಯಾರು ...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Super ಸಾಂಗ್ ವೆರಿ ನೈಸ್....</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Varshakke  thagadu movie madi industry haal ma...</td>\n",
              "      <td>Negative</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Tickets amount  adru mosa illa ... Love you  all</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Super super super film I can't explain</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>@Wild Rex ಕಟ್ಟಬೇಕು bronಖಂಡಿತಾ ಕಟ್ಟುತ್ತೆ  bro</td>\n",
              "      <td>Mixed feelings</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>shankaragouda desaigoudra super</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>@Vinay Vn  nani gentle men??</td>\n",
              "      <td>unknown state</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Nayanappa's book ??</td>\n",
              "      <td>unknown state</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Who is here after k likes</td>\n",
              "      <td>Mixed feelings</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Sir ನಿಮ್ಮ ಮಾತು  ಕ್ಕೆ % ಸತ್ಯ..</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Very nice togari tippa story</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                 text  ... unknown state\n",
              "0   ಒಂದು ದೇಶದ ಮುಂದುವರಿಯುವುದು ಅದರ ಆರ್ಥಿಕ ಸ್ಥಿತಿಯನ್ನ...  ...             0\n",
              "1   ಕನ್ನಡದಲ್ಲಿ ಡೈಲಿ ಟೆಕ್ ಅಪ್ಡೇಟ್ಸ್ ಪಡೆಯಲು ಸಬ್ಸ್ಕ್ರ...  ...             0\n",
              "2                                      Super sar song  ...             0\n",
              "3   Tiktokers present situation... nನೋಡುವವರು ಯಾರು ...  ...             0\n",
              "4                           Super ಸಾಂಗ್ ವೆರಿ ನೈಸ್....  ...             0\n",
              "5   Varshakke  thagadu movie madi industry haal ma...  ...             0\n",
              "6    Tickets amount  adru mosa illa ... Love you  all  ...             0\n",
              "7              Super super super film I can't explain  ...             0\n",
              "8        @Wild Rex ಕಟ್ಟಬೇಕು bronಖಂಡಿತಾ ಕಟ್ಟುತ್ತೆ  bro  ...             0\n",
              "9                     shankaragouda desaigoudra super  ...             0\n",
              "10                       @Vinay Vn  nani gentle men??  ...             1\n",
              "11                                Nayanappa's book ??  ...             1\n",
              "12                          Who is here after k likes  ...             0\n",
              "13                      Sir ನಿಮ್ಮ ಮಾತು  ಕ್ಕೆ % ಸತ್ಯ..  ...             0\n",
              "14                       Very nice togari tippa story  ...             0\n",
              "\n",
              "[15 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BwmXZPMmQu5O"
      },
      "source": [
        "X_train, y_train = df_tr['text'], df_tr[['Mixed feelings', 'Negative', 'Positive', 'not-Kannada', 'unknown state']]"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 220
        },
        "id": "U4bxYQMtQu5Q",
        "outputId": "b217e7f4-bb52-4c00-90da-7d10bde942ad"
      },
      "source": [
        "df_tt = pd.read_csv('/content/drive/My Drive/dataset/kannada_sentiment_full_dev.tsv', sep='\\t')\n",
        "print(df_tt.shape)\n",
        "df_tt.head()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(691, 2)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>category</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Binduge saryagi ugithidira good go ahead  we a...</td>\n",
              "      <td>Mixed feelings</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>yen song guru ...super</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>my fevorat story</td>\n",
              "      <td>not-Kannada</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Super ತೋಗರಿ ತೀಪ್ಪ</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ನಿಮ್ಮ ಮಾತುಗಳು ಅಕ್ಷರಶಃ ಸತ್ಯ... ನಿಮ್ಮ ಈ ಸಾಮಾನ್ಯ ...</td>\n",
              "      <td>Positive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                text        category\n",
              "0  Binduge saryagi ugithidira good go ahead  we a...  Mixed feelings\n",
              "1                             yen song guru ...super        Positive\n",
              "2                                   my fevorat story     not-Kannada\n",
              "3                                  Super ತೋಗರಿ ತೀಪ್ಪ        Positive\n",
              "4  ನಿಮ್ಮ ಮಾತುಗಳು ಅಕ್ಷರಶಃ ಸತ್ಯ... ನಿಮ್ಮ ಈ ಸಾಮಾನ್ಯ ...        Positive"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2ZEOOArBQu5R",
        "outputId": "20d4123b-25bb-4370-9b51-705d59b2fb64"
      },
      "source": [
        "df_tt['category'].value_counts()"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Positive          321\n",
              "Negative          139\n",
              "not-Kannada       110\n",
              "unknown state      69\n",
              "Mixed feelings     52\n",
              "Name: category, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 203
        },
        "id": "FW7vfMeZQu5S",
        "outputId": "d3e23f1d-2804-4584-e2a9-9a124c8cfc1d"
      },
      "source": [
        "categories = pd.get_dummies(df_tt.category)\n",
        "df_tt = pd.concat([df_tt, categories], axis=1)\n",
        "df_tt.head()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>category</th>\n",
              "      <th>Mixed feelings</th>\n",
              "      <th>Negative</th>\n",
              "      <th>Positive</th>\n",
              "      <th>not-Kannada</th>\n",
              "      <th>unknown state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Binduge saryagi ugithidira good go ahead  we a...</td>\n",
              "      <td>Mixed feelings</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>yen song guru ...super</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>my fevorat story</td>\n",
              "      <td>not-Kannada</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Super ತೋಗರಿ ತೀಪ್ಪ</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ನಿಮ್ಮ ಮಾತುಗಳು ಅಕ್ಷರಶಃ ಸತ್ಯ... ನಿಮ್ಮ ಈ ಸಾಮಾನ್ಯ ...</td>\n",
              "      <td>Positive</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                text  ... unknown state\n",
              "0  Binduge saryagi ugithidira good go ahead  we a...  ...             0\n",
              "1                             yen song guru ...super  ...             0\n",
              "2                                   my fevorat story  ...             0\n",
              "3                                  Super ತೋಗರಿ ತೀಪ್ಪ  ...             0\n",
              "4  ನಿಮ್ಮ ಮಾತುಗಳು ಅಕ್ಷರಶಃ ಸತ್ಯ... ನಿಮ್ಮ ಈ ಸಾಮಾನ್ಯ ...  ...             0\n",
              "\n",
              "[5 rows x 7 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vxs-HWmpQu5T"
      },
      "source": [
        "df_tt['text'] = df_tt['text'].apply(lambda x: demoji(x))\n",
        "df_tt['text'] = df_tt['text'].str.replace('\\d+', '')"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kK-6fVPMQu5U"
      },
      "source": [
        "X_test, y_test = df_tt['text'], df_tt[['Mixed feelings', 'Negative', 'Positive', 'not-Kannada', 'unknown state']]"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J6sOw7xqQu5U"
      },
      "source": [
        "max_len = 50\n",
        "oov_tok = \"<OOV>\"\n",
        "\n",
        "tk = Tokenizer(oov_token=oov_tok)\n",
        "tk.fit_on_texts(X_train)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ebxz8dQIQu5V"
      },
      "source": [
        "seq_tr = tk.texts_to_sequences(X_train)\n",
        "pad_seq_tr = pad_sequences(seq_tr, maxlen=max_len, padding='post', truncating='post')\n",
        "vocab_size = len(tk.word_index) + 1\n",
        "\n",
        "seq_tt = tk.texts_to_sequences(X_test)\n",
        "pad_seq_tt = pad_sequences(seq_tt, maxlen=max_len, padding='post', truncating='post')"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JomVmLxnQu5V",
        "outputId": "2ce884da-7381-4294-edf0-edee210f53c9"
      },
      "source": [
        "embedding_dim = 256\n",
        "n_lstm = 100\n",
        "drop_value = 0.2\n",
        "n_dense = 24\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Embedding(input_dim=vocab_size, output_dim=embedding_dim, input_length=max_len, trainable=True))\n",
        "model.add(Bidirectional(LSTM(units=n_lstm, dropout=drop_value, return_sequences=True)))\n",
        "model.add(Conv1D(filters=64, kernel_size=10, activation='relu'))\n",
        "# model.add(Dropout(drop_value))\n",
        "model.add(MaxPooling1D())\n",
        "model.add(Flatten())\n",
        "model.add(Dense(64, activation='relu'))\n",
        "# model.add(Dropout(drop_value))\n",
        "# model.add(Dense(32, activation='relu'))\n",
        "model.add(Dropout(drop_value))\n",
        "# model.add(Flatten())\n",
        "# model.add(Dense(5, activation='softmax'))\n",
        "model.add(Dense(5, activation='softmax'))\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding (Embedding)        (None, 50, 256)           3997184   \n",
            "_________________________________________________________________\n",
            "bidirectional (Bidirectional (None, 50, 200)           285600    \n",
            "_________________________________________________________________\n",
            "conv1d (Conv1D)              (None, 41, 64)            128064    \n",
            "_________________________________________________________________\n",
            "max_pooling1d (MaxPooling1D) (None, 20, 64)            0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 1280)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 64)                81984     \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 64)                0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 5)                 325       \n",
            "=================================================================\n",
            "Total params: 4,493,157\n",
            "Trainable params: 4,493,157\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qzGW5T5mQu5W",
        "outputId": "dcef239b-6d5b-4492-de73-7ae19883f735"
      },
      "source": [
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "cb = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', mode='max', min_delta=0.001, patience=5, restore_best_weights=True)\n",
        "num_epochs = 15\n",
        "history = model.fit(pad_seq_tr, y_train, epochs=num_epochs, validation_data=(pad_seq_tt, y_test), callbacks=[cb])"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/15\n",
            "195/195 [==============================] - 54s 253ms/step - loss: 1.2487 - accuracy: 0.5043 - val_loss: 1.0201 - val_accuracy: 0.5991\n",
            "Epoch 2/15\n",
            "195/195 [==============================] - 48s 247ms/step - loss: 0.8423 - accuracy: 0.6817 - val_loss: 1.0221 - val_accuracy: 0.6310\n",
            "Epoch 3/15\n",
            "195/195 [==============================] - 48s 247ms/step - loss: 0.5332 - accuracy: 0.8055 - val_loss: 1.1974 - val_accuracy: 0.5948\n",
            "Epoch 4/15\n",
            "195/195 [==============================] - 48s 246ms/step - loss: 0.3887 - accuracy: 0.8603 - val_loss: 1.5792 - val_accuracy: 0.5702\n",
            "Epoch 5/15\n",
            "195/195 [==============================] - 48s 248ms/step - loss: 0.2839 - accuracy: 0.8971 - val_loss: 1.7614 - val_accuracy: 0.6049\n",
            "Epoch 6/15\n",
            "195/195 [==============================] - 48s 246ms/step - loss: 0.2354 - accuracy: 0.9134 - val_loss: 2.1711 - val_accuracy: 0.5876\n",
            "Epoch 7/15\n",
            "195/195 [==============================] - 48s 248ms/step - loss: 0.2086 - accuracy: 0.9245 - val_loss: 2.0913 - val_accuracy: 0.5832\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u8GR8StGQu5W",
        "outputId": "83059f07-9e1b-4368-ae82-f29abc7b59b3"
      },
      "source": [
        "model.evaluate(pad_seq_tt, y_test, verbose=0)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1.0221061706542969, 0.6309695839881897]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PTtuEVRJQu5X",
        "outputId": "85bb81f6-93c9-4543-b51d-e42c50c3c07f"
      },
      "source": [
        "len(tk.word_index)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "15613"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PMfKyI_JQu5X",
        "outputId": "4877c186-2a24-42e2-c26f-898008232eda"
      },
      "source": [
        "'''embedding_vectors = {}\n",
        "f = open(\"E:\\zz\\INT\\piblitz\\summarizer\\glove.6B\\glove.6B.100d.txt\", encoding=\"utf8\")\n",
        "for line in f:\n",
        "    value = line.split(\" \")\n",
        "    word = value[0]\n",
        "    coef = np.array(value[1:], dtype='float32')\n",
        "    embedding_vectors[word] = coef\n",
        "print(\"Total word vectors: \", len(embedding_vectors))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Total word vectors:  400001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hez70X0eQu5X"
      },
      "source": [
        "'''# creating a matrix only of the words present in our corpus and their vectors\n",
        "embedding_matrix = np.zeros((vocab_size, 100))\n",
        "for word, i in tk.word_index.items():\n",
        "    embedding_value = embedding_vectors.get(word)\n",
        "    if embedding_value is not None:\n",
        "        embedding_matrix[i] = embedding_value"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PQNRtbqwQu5Y",
        "outputId": "81715ba0-8e5b-48c4-ada1-5726e297232c"
      },
      "source": [
        "'''filter_size = 32\n",
        "kernel_size = 10\n",
        "drop_value = 0.2\n",
        "n_dense = 32\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Embedding(input_dim=vocab_size, output_dim=100, weights=[embedding_matrix], input_length=max_len, trainable=False))\n",
        "model.add(Bidirectional(LSTM(units=100, dropout=drop_value, return_sequences=True)))\n",
        "# model.add(Dropout(drop_value))\n",
        "model.add(GlobalAveragePooling1D())\n",
        "model.add(Flatten())\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dropout(drop_value))\n",
        "# model.add(Dense(64, activation='relu'))\n",
        "# model.add(Dropout(drop_value))\n",
        "model.add(Dense(32, activation='relu'))\n",
        "model.add(Dropout(drop_value))\n",
        "model.add(Dense(5, activation='softmax'))\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_1 (Embedding)      (None, 50, 100)           6674700   \n",
            "_________________________________________________________________\n",
            "bidirectional_1 (Bidirection (None, 50, 200)           160800    \n",
            "_________________________________________________________________\n",
            "global_average_pooling1d_1 ( (None, 200)               0         \n",
            "_________________________________________________________________\n",
            "flatten_1 (Flatten)          (None, 200)               0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 128)               25728     \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 64)                8256      \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 64)                0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 32)                2080      \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 32)                0         \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 5)                 165       \n",
            "=================================================================\n",
            "Total params: 6,871,729\n",
            "Trainable params: 197,029\n",
            "Non-trainable params: 6,674,700\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VNAsCJIyQu5Z",
        "outputId": "6d138b96-55dd-48c0-e072-df90efe04a37"
      },
      "source": [
        "'''model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "num_epochs = 5\n",
        "history = model.fit(pad_seq_tr, y_train, epochs=num_epochs, validation_data=(pad_seq_tt, y_test))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1115/1115 [==============================] - 51s 46ms/step - loss: 1.1143 - accuracy: 0.5883 - val_loss: 1.0837 - val_accuracy: 0.5994\n",
            "Epoch 2/5\n",
            "1115/1115 [==============================] - 48s 43ms/step - loss: 1.0887 - accuracy: 0.5966 - val_loss: 1.0675 - val_accuracy: 0.6047\n",
            "Epoch 3/5\n",
            "1115/1115 [==============================] - 47s 42ms/step - loss: 1.0693 - accuracy: 0.6031 - val_loss: 1.0733 - val_accuracy: 0.6060\n",
            "Epoch 4/5\n",
            "1115/1115 [==============================] - 47s 42ms/step - loss: 1.0529 - accuracy: 0.6067 - val_loss: 1.0581 - val_accuracy: 0.5994\n",
            "Epoch 5/5\n",
            "1115/1115 [==============================] - 47s 42ms/step - loss: 1.0344 - accuracy: 0.6127 - val_loss: 1.0763 - val_accuracy: 0.6052\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gxSqxdLGQu5Z",
        "outputId": "b3911501-0d3b-4ca9-c44d-55c7dad45289"
      },
      "source": [
        "'''model.evaluate(pad_seq_tt, y_test, verbose=0)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1.076276421546936, 0.6052498817443848]"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zBj8H6m_Qu5Z",
        "outputId": "c12fc15a-cccb-40e4-ced3-9c94365d42df"
      },
      "source": [
        "y_pred = model.predict(pad_seq_tt)\n",
        "\n",
        "f = f1_score(y_test, y_pred.round(), average='weighted')\n",
        "print(f)\n",
        "a = accuracy_score(y_test, y_pred.round())\n",
        "print(a)\n"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.55226773051479\n",
            "0.5180897250361794\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GGJYA1YDQu5a",
        "outputId": "84d9b57c-053c-4c17-b50b-32350b86a5df"
      },
      "source": [
        "cr = classification_report(y_test, y_pred.round())\n",
        "print(cr)"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.00      0.00      0.00        52\n",
            "           1       0.68      0.37      0.48       139\n",
            "           2       0.71      0.75      0.73       321\n",
            "           3       0.75      0.52      0.61       110\n",
            "           4       0.70      0.10      0.18        69\n",
            "\n",
            "   micro avg       0.71      0.52      0.60       691\n",
            "   macro avg       0.57      0.35      0.40       691\n",
            "weighted avg       0.66      0.52      0.55       691\n",
            " samples avg       0.52      0.52      0.52       691\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in samples with no predicted labels. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u6mQoTf2UEPv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f21ce371-237e-4a29-a038-9f1f0f0aefa3"
      },
      "source": [
        "cm = confusion_matrix(y_test.values.argmax(axis=1), y_pred.argmax(axis=1))\n",
        "print(cm)"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[  5  10  29   3   5]\n",
            " [  5  71  57   1   5]\n",
            " [  4  21 269  25   2]\n",
            " [  0   4  24  69  13]\n",
            " [  4   5  32   6  22]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jkyR3GJta5Km"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
